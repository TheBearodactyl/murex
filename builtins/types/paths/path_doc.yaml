- DocumentID: path
  Title: >-
    `path`
  CategoryID: types
  Summary: >-
    Structured object for working with file and directory paths
  Description: |-
    The `path` type Turns file and directory paths into structured objects.

    The root directory (typically `/`) is counted as a directory. If a path is
    relative rather than absolute then `/` will be excluded from outputted string.
  Usage:
  Examples: |-
    ### First two elements in a path

    ```
    » $PWD[..2]
    /Users/
    ```

    ### Check if path exists

    ```
    » set path foobar="/dev/foobar"
    » $foobar.2.Exists
    ```

    ### path data structure

    ```
    » set path foobar="/dev/foobar"
    » $foobar -> format json
    [
        {
            "Exists": true,
            "IsDir": true,
            "IsRelative": false,
            "Value": "/"
        },
        {
            "Exists": true,
            "IsDir": true,
            "IsRelative": false,
            "Value": "dev"
        },
        {
            "Exists": false,
            "IsDir": false,
            "IsRelative": false,
            "Value": "foobar"
        }
    ]
    ```
  Hooks:
    ReadArray(): >-
      Each element is a directory branch. Root, `/`, is treated as it's own element
    ReadArrayWithType(): >-
      Same as `ReadArray()`
    ReadMap(): >-
      Not currently supported
    WriteArray(): >-
      Each element is a directory branch
    ReadIndex(): >-
      Returns a directory branch or filename if last element is a file
    ReadNotIndex(): >-
      Supported
    Marshal(): >-
      Supported
    Unmarshal(): >-
      Supported
  Detail:
  Associations:
    Mimes:
    Extensions:
  Related:
    - paths
    - PWD
    - PWDHIST
    - MUREX_EXE
