- DocumentID: paths
  Title: >-
    `paths`
  CategoryID: types
  Summary: >-
    Structured array for working with `$PATH` style data
  Description: |-
    The `path` type Turns file and directory paths into structured objects.

    The root directory (typically `/`) is counted as a directory. If a path is
    relative rather than absolute then `/` will be excluded from outputted string.
  Usage:
  Examples: |-
    ### Creating a PATH

    ```
    » %[/bin, /usr/bin, "$JAVA_HOME/bin"] -> format paths
    /bin:/usr/bin:/opt/java/bin
    ```

    ### Splitting a PATH

    ```
    » $PATH -> :paths: format json
    [
        "/bin",
        "/usr/bin",
        "/opt/java/bin"
    ]
    ```

    ### Appending to $PATH

    As a statement:

    ```
    » $PATH -> append /sbin -> export PATH
    » $PATH
    /bin:/usr/bin:/opt/java/bin:/sbin
    ```

    As an expression:

    ```
    » $PATH <~ %[ "/sbin" ]
    » $PATH
    /bin:/usr/bin:/opt/java/bin:/sbin
    ```
  Hooks:
    ReadArray(): >-
      Each element is a directory branch. Root, `/`, is treated as it's own element
    ReadArrayWithType(): >-
      Same as `ReadArray()`
    ReadMap(): >-
      Not currently supported
    WriteArray(): >-
      Each element is a directory branch
    ReadIndex(): >-
      Returns a directory branch or filename if last element is a file
    ReadNotIndex(): >-
      Supported
    Marshal(): >-
      Supported
    Unmarshal(): >-
      Supported
  Detail:
  Associations:
    Mimes:
    Extensions:
  Related:
    - path
    - PWD
    - PWDHIST
    - MUREX_EXE
    - assign-or-merge
    - create-array
