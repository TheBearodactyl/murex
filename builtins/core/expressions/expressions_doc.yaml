- DocumentID: expr
  Title: >+
    `expr`
  CategoryID: commands
  Summary: >-
    Expressions: mathematical, string comparisons, logical operators
  Description: |-
    `expr` is the underlying builtin which handles all expression parsing and
    evaluation in Murex.
    
    Idiomatic Murex would be to write expressions without explicitly calling the
    underlying builtin, eg `1 + 2`, though you can invoke them via `expr` if
    needed. However please bare in mind that expressions have special parsing
    rules to make them more ergonomic. So if you write an expression as a command,
    eg `expr 1 + 2` then it is being parsed as a statement. This means more complex
    expressions might parse unintuitively. You can raise a bug if that does happen.

    Expressions also support running commands as C-style functions, for example:
    ```
    » 5 * echo(5)
    25
    ```

    For a full list of operators supported exclusively in expression, see the
    last section in this document.
  Usage: |-
    ```
    expression -> <stdout>

    statement (expression)

    expr expression -> <stdout>
    ```
  Examples: |-
    **Expressions:**

    ```
    » 3 * (3 + 1)
    12
    ```

    **Statements with inlined expressions:**

    Any parameter surrounded by parenthesis is first evaluated as an expression,
    then as a string.

    ```
    » out (3 * 2)
    6
    ```

    **Expressions with inlined statements:**

    Functions can be inlined as a statement using `function(parameters...)` syntax.

    ```
    » datetime(--in {now} --out {unix}) / 60
    28339115.783333335
    ```

    Please note that currently the only functions supported are ones who's names
    are comprised entirely of alpha, numeric, underscore and/or exclamation marks.

    **JSON array:**

    ```
    » %[apples oranges grapes]
    [
        "apples",
        "oranges",
        "grapes"
    ]
    ```
  Detail: |-
    ### Order of Operations

    The order of operations follows the same rules as the C programming language,
    which itself is an extension of the order of operations in mathematics, often
    referred to as PEMDAS or MODMAS ([read more](https://en.wikipedia.org/wiki/Order_of_operations)).

    The [Wikipedia article](https://en.wikipedia.org/wiki/Order_of_operations#Programming_languages)
    summarises that order succinctly however the detailed specification is defined
    by its implementation, as seen in the code below:

    ```go
    {{ include "lang/expressions/expression.go" }}
    ```
  Synonyms:
  Related:
    - addition
    - subtraction
    - multiplication
    - division
    - add-with
    - subtract-by
    - multiply-by
    - divide-by
    - elvis
    - null-coalescing
    - create-array
    - create-object
