- DocumentID: config
  Title: >+
    `config`
  CategoryID: commands
  Summary: >-
    Query or define Murex runtime settings
  Description: |-
    Rather than Murex runtime settings being definable via obscure environmental
    variables, Murex instead supports a registry of config defined via the
    `config` command. This means any preferences and/or runtime config becomes
    centralised and discoverable.

  Usage: |-
    List all settings:
    
    ```
    config -> <stdout>
    ```

    Get a setting:

    ```
    config get app key -> <stdout>
    ```

    Set a setting:

    ```
    config set app key value

    <stdin> -> config set app key

    config eval app key { -> code-block }
    ```

    Define a new config setting:

    ```
    config define app key { json }
    ```

    Reset a setting to it's default value:

    ```
    !config app key

    config default app key
    ```
  Examples: |-
    Using `eval` to append to an array (in this instance, adding a function
    name to the list of "safe" commands)
    
    ```
    » function foobar { -> match foobar }
    » config eval shell safe-commands { -> append foobar }
    ```
  Flags:
  Detail: |-
    With regards to `config`, the following terms are applied:

    ### app

    This refers to a grouped category of settings. For example the name of a built
    in.
        
    Other app names include

    * `shell`: for "global" (system wide) Murex settings
    * `proc`: for scoped Murex settings
    * `http`: for settings that are applied to any processes which use the builtin
        HTTP user agent (eg `open`, `get`, `getfile`, `post`)
    * `test`: settings for Murex's test frameworks
    * `index`: settings for `[` (index)

    ### key

    This refers to the config setting itself. For example the "app" might be `http`
    but the "key" might be `timeout` - where the "key", in this instance, holds the
    value for how long any HTTP user agents might wait before timing out.

    ### value

    Value is the actual value of a setting. So the value for "app": `http`, "key":
    `timeout` might be `10`. eg

    ```
    » config get http timeout
    10
    ```

    ### scope

    Settings in `config`, by default, are scoped per function and module. Any
    functions called will inherit the settings of it's caller parent. However any
    child functions that then change the settings will only change settings for it's
    own function and not the parent caller.

    Please note that `config` settings are scoped differently to local variables.

    ### global

    Global settings defined inside a function will affect settings queried inside
    another executing function (same concept as global variables).

    ## Directives

    {{ include "builtins/core/config/config_doc.inc.md" }}
  Synonyms:
  - config
  - "!config"
  Related:
  - runtime
  - open
  - event
  - append
  - function
  - match
  - get
  - post
  - getfile
  - item-index
  - element
  - create-object

