- DocumentID: logical-and
  Title: >-
    `&&` And Logical Operator
  CategoryID: parser
  Summary: >-
    Continues next operation if previous operation passes
  Description: |-
    When in the **normal** run mode (see "schedulers" link below) this will only
    run the command on the right hand side if the command on the left hand side
    does not error. Neither stdout nor stderr are piped.

    This has no effect in `try` nor `trypipe` run modes because they automatically
    apply stricter error handling.
  Examples: |-
    ### When true

    Second command runs because the first command doesn't error:

    ```
    » out one && out two
    one
    two
    ```

    When false

    Second command does not run because the first command produces an error:

    ```
    » err one && out two
    one
    ```
  Detail: |-
    This is equivalent to a `try` block:

    ```
    try {
        err one
        out two
    }
    ```
  Related:
  - pipe-err
  - pipeline
  - schedulers
  - out
  - err
  - try
  - trypipe
  - logical-or
  - elvis



- DocumentID: logical-or
  Title: >-
    `||` Or Logical Operator
  CategoryID: parser
  Summary: >-
    Continues next operation only if previous operation fails
  Description: |-
    When in the **normal** run mode (see "schedulers" link below) this will only
    run the command on the right hand side if the command on the left hand side
    does not error. Neither stdout nor stderr are piped.

    This has no effect in `try` nor `trypipe` run modes because they automatically
    apply stricter error handling. See detail below.
  Examples: |-
    ### When true

    Second command does not run because the first command doesn't error:

    ```
    » out one || out two
    one
    ```

    ### When false
    
    Second command does run because the first command produces an error:

    ```
    » err one || out two
    one
    two
    ```
  Detail: |-
    This has no effect in `try` nor `trypipe` run modes because they automatically
    apply stricter error handling. You can achieve a similar behavior in `try` with
    the following code:

    ```
    try {
        err one -> !if { out two }
    }
    ```

    There is no workaround for `trypipe`.
  Related:
  - pipe-err
  - pipeline
  - schedulers
  - out
  - err
  - try
  - trypipe
  - logical-and
  - elvis